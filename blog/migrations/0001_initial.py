# Generated by Django 5.2.6 on 2025-10-19 20:07

import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        ('wagtailcore', '0095_groupsitepermission'),
        ('wagtailimages', '0027_image_description'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('meta_description', models.TextField(blank=True, help_text='Meta description for SEO (160 characters max)', max_length=160)),
                ('meta_keywords', models.CharField(blank=True, db_index=True, help_text='Comma-separated keywords for SEO', max_length=255)),
                ('og_title', models.CharField(blank=True, help_text='Open Graph title (for social media sharing)', max_length=255)),
                ('og_description', models.TextField(blank=True, help_text='Open Graph description', max_length=160)),
                ('intro', wagtail.fields.RichTextField(blank=True, help_text='Introduction text for the blog index page')),
                ('posts_per_page', models.IntegerField(default=10, help_text='Number of blog posts to display per page')),
                ('show_featured_posts', models.BooleanField(db_index=True, default=True, help_text='Display featured posts at the top')),
                ('featured_posts_count', models.IntegerField(default=3, help_text='Number of featured posts to display')),
                ('layout_style', models.CharField(choices=[('list', 'List View'), ('grid', 'Grid View'), ('masonry', 'Masonry Grid')], default='grid', help_text='Blog post display layout', max_length=20)),
                ('og_image', models.ForeignKey(blank=True, help_text='Open Graph image for social media sharing', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'verbose_name': 'Blog Index Page',
                'verbose_name_plural': 'Blog Index Pages',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('meta_description', models.TextField(blank=True, help_text='Meta description for SEO (160 characters max)', max_length=160)),
                ('meta_keywords', models.CharField(blank=True, db_index=True, help_text='Comma-separated keywords for SEO', max_length=255)),
                ('og_title', models.CharField(blank=True, help_text='Open Graph title (for social media sharing)', max_length=255)),
                ('og_description', models.TextField(blank=True, help_text='Open Graph description', max_length=160)),
                ('author', models.CharField(db_index=True, default='Prabuddh Mathur', help_text='Post author name', max_length=100)),
                ('author_bio', wagtail.fields.RichTextField(blank=True, help_text='Author biography (optional, overrides global author bio)')),
                ('date', models.DateField(db_index=True, help_text='Publication date for the blog post', verbose_name='Post date')),
                ('intro', models.CharField(db_index=True, help_text='Brief introduction/excerpt (250 characters max)', max_length=250)),
                ('featured_image_caption', models.CharField(blank=True, help_text='Optional caption for the featured image', max_length=250)),
                ('body', wagtail.fields.StreamField([('heading', 3), ('text', 6), ('image', 11), ('quote', 16), ('button', 22), ('spacer', 24), ('cta', 30)], blank=True, block_lookup={0: ('wagtail.blocks.CharBlock', (), {'help_text': 'Enter the heading text', 'max_length': 255, 'required': True}), 1: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('h1', 'Heading 1'), ('h2', 'Heading 2'), ('h3', 'Heading 3'), ('h4', 'Heading 4'), ('h5', 'Heading 5'), ('h6', 'Heading 6')], 'help_text': 'Select heading level'}), 2: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('left', 'Left'), ('center', 'Center'), ('right', 'Right')], 'help_text': 'Text alignment'}), 3: ('wagtail.blocks.StructBlock', [[('heading_text', 0), ('heading_level', 1), ('alignment', 2)]], {}), 4: ('wagtail.blocks.RichTextBlock', (), {'help_text': 'Rich text content with formatting options', 'required': True}), 5: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('left', 'Left'), ('center', 'Center'), ('right', 'Right'), ('justify', 'Justify')], 'help_text': 'Text alignment'}), 6: ('wagtail.blocks.StructBlock', [[('text', 4), ('alignment', 5)]], {}), 7: ('wagtail.images.blocks.ImageChooserBlock', (), {'help_text': 'Select an image', 'required': True}), 8: ('wagtail.blocks.CharBlock', (), {'help_text': 'Optional image caption', 'max_length': 255, 'required': False}), 9: ('wagtail.blocks.CharBlock', (), {'help_text': 'Alternative text for accessibility (recommended)', 'max_length': 255, 'required': False}), 10: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('left', 'Left'), ('center', 'Center'), ('right', 'Right'), ('full', 'Full Width')], 'help_text': 'Image alignment'}), 11: ('wagtail.blocks.StructBlock', [[('image', 7), ('caption', 8), ('alt_text', 9), ('alignment', 10)]], {}), 12: ('wagtail.blocks.CharBlock', (), {'help_text': 'Quote text', 'required': True}), 13: ('wagtail.blocks.CharBlock', (), {'help_text': 'Quote author', 'max_length': 100, 'required': False}), 14: ('wagtail.blocks.CharBlock', (), {'help_text': "Author's title or position", 'max_length': 100, 'required': False}), 15: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('default', 'Default'), ('large', 'Large Quote'), ('bordered', 'Bordered'), ('accent', 'Accent Style')], 'help_text': 'Quote style'}), 16: ('wagtail.blocks.StructBlock', [[('quote', 12), ('author', 13), ('author_title', 14), ('style', 15)]], {}), 17: ('wagtail.blocks.CharBlock', (), {'help_text': 'Button text', 'max_length': 50, 'required': True}), 18: ('wagtail.blocks.URLBlock', (), {'help_text': 'Button URL', 'required': True}), 19: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('primary', 'Primary'), ('secondary', 'Secondary'), ('accent', 'Accent'), ('ghost', 'Ghost'), ('link', 'Link')], 'help_text': 'Button style (DaisyUI)'}), 20: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('xs', 'Extra Small'), ('sm', 'Small'), ('md', 'Medium'), ('lg', 'Large')], 'help_text': 'Button size'}), 21: ('wagtail.blocks.BooleanBlock', (), {'default': False, 'help_text': 'Open link in new tab', 'required': False}), 22: ('wagtail.blocks.StructBlock', [[('button_text', 17), ('button_url', 18), ('button_style', 19), ('button_size', 20), ('open_in_new_tab', 21)]], {}), 23: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('small', 'Small (1rem)'), ('medium', 'Medium (2rem)'), ('large', 'Large (4rem)'), ('xlarge', 'Extra Large (6rem)')], 'help_text': 'Spacer height'}), 24: ('wagtail.blocks.StructBlock', [[('height', 23)]], {}), 25: ('wagtail.blocks.CharBlock', (), {'help_text': 'CTA title', 'max_length': 100, 'required': True}), 26: ('wagtail.blocks.CharBlock', (), {'help_text': 'Optional description text', 'max_length': 300, 'required': False}), 27: ('wagtail.blocks.URLBlock', (), {'help_text': 'Button link URL', 'required': True}), 28: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('primary', 'Primary'), ('secondary', 'Secondary'), ('accent', 'Accent'), ('ghost', 'Ghost'), ('outline', 'Outline')], 'help_text': 'Button style'}), 29: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('transparent', 'Transparent'), ('base-100', 'Light'), ('base-200', 'Light Gray'), ('primary', 'Primary'), ('secondary', 'Secondary'), ('accent', 'Accent')], 'help_text': 'Background color'}), 30: ('wagtail.blocks.StructBlock', [[('title', 25), ('description', 26), ('button_text', 17), ('button_link', 27), ('button_style', 28), ('background_color', 29), ('text_alignment', 2)]], {})})),
                ('featured', models.BooleanField(db_index=True, default=False, help_text='Mark as featured post (shown prominently on blog index)')),
                ('show_author_bio', models.BooleanField(default=True, help_text='Display author biography at the end of post')),
                ('show_related_posts', models.BooleanField(default=True, help_text='Display related posts based on tags')),
                ('estimated_reading_time', models.IntegerField(default=0, help_text='Estimated reading time in minutes (auto-calculated on save)')),
                ('featured_image', models.ForeignKey(blank=True, help_text='Featured image displayed in listings and at top of post', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
                ('og_image', models.ForeignKey(blank=True, help_text='Open Graph image for social media sharing', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'verbose_name': 'Blog Post',
                'verbose_name_plural': 'Blog Posts',
                'ordering': ['-first_published_at', '-date'],
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogPageTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='blog.blogpage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='blogpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='blog.BlogPageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
